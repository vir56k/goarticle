// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/article/article.proto

package com_github_vir56k_srv_article

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Article struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Body                 string   `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Author               string   `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	CreatedDate          string   `protobuf:"bytes,5,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	LastModifyDate       string   `protobuf:"bytes,6,opt,name=lastModifyDate,proto3" json:"lastModifyDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Article) Reset()         { *m = Article{} }
func (m *Article) String() string { return proto.CompactTextString(m) }
func (*Article) ProtoMessage()    {}
func (*Article) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfa7f65df4b480f, []int{0}
}

func (m *Article) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Article.Unmarshal(m, b)
}
func (m *Article) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Article.Marshal(b, m, deterministic)
}
func (m *Article) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Article.Merge(m, src)
}
func (m *Article) XXX_Size() int {
	return xxx_messageInfo_Article.Size(m)
}
func (m *Article) XXX_DiscardUnknown() {
	xxx_messageInfo_Article.DiscardUnknown(m)
}

var xxx_messageInfo_Article proto.InternalMessageInfo

func (m *Article) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Article) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Article) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Article) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Article) GetCreatedDate() string {
	if m != nil {
		return m.CreatedDate
	}
	return ""
}

func (m *Article) GetLastModifyDate() string {
	if m != nil {
		return m.LastModifyDate
	}
	return ""
}

type Request struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Body                 string   `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfa7f65df4b480f, []int{1}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Request) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Request) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type Response struct {
	Article              *Article   `protobuf:"bytes,1,opt,name=article,proto3" json:"article,omitempty"`
	Articles             []*Article `protobuf:"bytes,2,rep,name=articles,proto3" json:"articles,omitempty"`
	Errors               []*Error   `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfa7f65df4b480f, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetArticle() *Article {
	if m != nil {
		return m.Article
	}
	return nil
}

func (m *Response) GetArticles() []*Article {
	if m != nil {
		return m.Articles
	}
	return nil
}

func (m *Response) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

type Error struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bfa7f65df4b480f, []int{3}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*Article)(nil), "com.github.vir56k.srv.article.Article")
	proto.RegisterType((*Request)(nil), "com.github.vir56k.srv.article.Request")
	proto.RegisterType((*Response)(nil), "com.github.vir56k.srv.article.Response")
	proto.RegisterType((*Error)(nil), "com.github.vir56k.srv.article.Error")
}

func init() {
	proto.RegisterFile("proto/article/article.proto", fileDescriptor_6bfa7f65df4b480f)
}

var fileDescriptor_6bfa7f65df4b480f = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0xad, 0x24, 0x4b, 0x76, 0xc7, 0xe0, 0xc3, 0x62, 0x5a, 0xd1, 0x52, 0x30, 0xa2, 0xb8, 0x3d,
	0xa9, 0xe0, 0xd2, 0x9e, 0x5a, 0xa8, 0xdb, 0x1a, 0x5f, 0xda, 0x52, 0xd4, 0x4b, 0x4b, 0x2f, 0x91,
	0x76, 0x27, 0xf1, 0x12, 0xd9, 0xeb, 0xec, 0x8e, 0x0c, 0xfe, 0xa0, 0x9c, 0x93, 0x2f, 0xc9, 0x37,
	0x05, 0xaf, 0xd6, 0xc1, 0xe4, 0x10, 0xe1, 0x80, 0x4e, 0x7a, 0xf3, 0xf4, 0xe6, 0x31, 0xef, 0x09,
	0x04, 0x2f, 0xd7, 0x5a, 0x91, 0x7a, 0x97, 0x6b, 0x92, 0xbc, 0xc4, 0xfd, 0x33, 0xb5, 0x2c, 0x7b,
	0xc5, 0xd5, 0x32, 0x3d, 0x93, 0xb4, 0xa8, 0x8a, 0x74, 0x23, 0xf5, 0x87, 0x8f, 0xe7, 0xa9, 0xd1,
	0x9b, 0xd4, 0x89, 0x92, 0x4b, 0x0f, 0xba, 0xd3, 0x1a, 0xb3, 0x01, 0xf8, 0x52, 0xc4, 0xde, 0xc8,
	0x7b, 0xfb, 0x34, 0xf3, 0xa5, 0x60, 0x43, 0x08, 0x49, 0x52, 0x89, 0xb1, 0x6f, 0xa9, 0x7a, 0x60,
	0x0c, 0x3a, 0x85, 0x12, 0xdb, 0x38, 0xb0, 0xa4, 0xc5, 0xec, 0x19, 0x44, 0x79, 0x45, 0x0b, 0xa5,
	0xe3, 0x8e, 0x65, 0xdd, 0xc4, 0x46, 0xd0, 0xe7, 0x1a, 0x73, 0x42, 0xf1, 0x3d, 0x27, 0x8c, 0x43,
	0xfb, 0xf2, 0x90, 0x62, 0x63, 0x18, 0x94, 0xb9, 0xa1, 0x9f, 0x4a, 0xc8, 0xd3, 0xad, 0x15, 0x45,
	0x56, 0x74, 0x8f, 0x4d, 0xbe, 0x41, 0x37, 0xc3, 0x8b, 0x0a, 0x0d, 0x3d, 0xfe, 0xcc, 0xe4, 0xc6,
	0x83, 0x5e, 0x86, 0x66, 0xad, 0x56, 0x06, 0xd9, 0x17, 0xe8, 0xba, 0x12, 0xac, 0x57, 0x7f, 0x32,
	0x4e, 0x1f, 0xac, 0x2a, 0x75, 0x35, 0x65, 0xfb, 0x35, 0xf6, 0x15, 0x7a, 0x0e, 0x9a, 0xd8, 0x1f,
	0x05, 0x47, 0x58, 0xdc, 0xed, 0xb1, 0x4f, 0x10, 0xa1, 0xd6, 0x4a, 0x9b, 0x38, 0xb0, 0x0e, 0xaf,
	0x1b, 0x1c, 0x66, 0x3b, 0x71, 0xe6, 0x76, 0x92, 0xcf, 0x10, 0x5a, 0x62, 0x97, 0x96, 0x2b, 0x51,
	0x27, 0x09, 0x33, 0x8b, 0x77, 0xe5, 0x0b, 0x34, 0x5c, 0xcb, 0x35, 0x49, 0xb5, 0x72, 0xed, 0x1c,
	0x52, 0x93, 0x2b, 0x1f, 0x86, 0xee, 0xa4, 0xdf, 0x55, 0x51, 0x4a, 0xfe, 0x07, 0xf5, 0x46, 0x72,
	0x64, 0x7f, 0x21, 0x98, 0x23, 0xb1, 0xa6, 0x38, 0xee, 0x8b, 0xbc, 0x78, 0xd3, 0xa8, 0xab, 0x3b,
	0x4f, 0x9e, 0xb0, 0xff, 0x10, 0xcd, 0x91, 0xa6, 0x65, 0xd9, 0x86, 0xf9, 0x09, 0xf4, 0xe7, 0x48,
	0xbf, 0xf2, 0x25, 0xfe, 0x90, 0xa6, 0x8d, 0xf3, 0x27, 0xd7, 0x3e, 0x3c, 0xdf, 0x37, 0xa6, 0x15,
	0x21, 0x27, 0x14, 0xed, 0x97, 0xd6, 0x7a, 0x2e, 0xf6, 0x0f, 0x3a, 0x33, 0x21, 0x9b, 0xad, 0x5d,
	0xf6, 0x23, 0xac, 0x8b, 0xc8, 0xfe, 0x87, 0xde, 0xdf, 0x06, 0x00, 0x00, 0xff, 0xff, 0x47, 0xa3,
	0x4f, 0x53, 0xa6, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ArticlePublicService service

type ArticlePublicServiceClient interface {
	Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetAll(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetNameList(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type articlePublicServiceClient struct {
	c           client.Client
	serviceName string
}

func NewArticlePublicServiceClient(serviceName string, c client.Client) ArticlePublicServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "com.github.vir56k.srv.article"
	}
	return &articlePublicServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *articlePublicServiceClient) Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "ArticlePublicService.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlePublicServiceClient) GetAll(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "ArticlePublicService.GetAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlePublicServiceClient) GetNameList(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "ArticlePublicService.GetNameList", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ArticlePublicService service

type ArticlePublicServiceHandler interface {
	Get(context.Context, *Request, *Response) error
	GetAll(context.Context, *Request, *Response) error
	GetNameList(context.Context, *Request, *Response) error
}

func RegisterArticlePublicServiceHandler(s server.Server, hdlr ArticlePublicServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&ArticlePublicService{hdlr}, opts...))
}

type ArticlePublicService struct {
	ArticlePublicServiceHandler
}

func (h *ArticlePublicService) Get(ctx context.Context, in *Request, out *Response) error {
	return h.ArticlePublicServiceHandler.Get(ctx, in, out)
}

func (h *ArticlePublicService) GetAll(ctx context.Context, in *Request, out *Response) error {
	return h.ArticlePublicServiceHandler.GetAll(ctx, in, out)
}

func (h *ArticlePublicService) GetNameList(ctx context.Context, in *Request, out *Response) error {
	return h.ArticlePublicServiceHandler.GetNameList(ctx, in, out)
}

// Client API for ArticleProtectedService service

type ArticleProtectedServiceClient interface {
	Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetNameList(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Edit(ctx context.Context, in *Article, opts ...client.CallOption) (*Response, error)
}

type articleProtectedServiceClient struct {
	c           client.Client
	serviceName string
}

func NewArticleProtectedServiceClient(serviceName string, c client.Client) ArticleProtectedServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "com.github.vir56k.srv.article"
	}
	return &articleProtectedServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *articleProtectedServiceClient) Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "ArticleProtectedService.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleProtectedServiceClient) GetNameList(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "ArticleProtectedService.GetNameList", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleProtectedServiceClient) Edit(ctx context.Context, in *Article, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "ArticleProtectedService.Edit", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ArticleProtectedService service

type ArticleProtectedServiceHandler interface {
	Get(context.Context, *Request, *Response) error
	GetNameList(context.Context, *Request, *Response) error
	Edit(context.Context, *Article, *Response) error
}

func RegisterArticleProtectedServiceHandler(s server.Server, hdlr ArticleProtectedServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&ArticleProtectedService{hdlr}, opts...))
}

type ArticleProtectedService struct {
	ArticleProtectedServiceHandler
}

func (h *ArticleProtectedService) Get(ctx context.Context, in *Request, out *Response) error {
	return h.ArticleProtectedServiceHandler.Get(ctx, in, out)
}

func (h *ArticleProtectedService) GetNameList(ctx context.Context, in *Request, out *Response) error {
	return h.ArticleProtectedServiceHandler.GetNameList(ctx, in, out)
}

func (h *ArticleProtectedService) Edit(ctx context.Context, in *Article, out *Response) error {
	return h.ArticleProtectedServiceHandler.Edit(ctx, in, out)
}
